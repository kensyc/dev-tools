#!/usr/bin/env bash

set -e

usage() {
cat <<- EOF
Start a tmux session with application specific environment variables and binaries
Usage:
    startenv [-d|--defaults] [-f|--folder] [-h|--help]
             [-r|--regenerate ] [-v|--verbose]
             <name>
Options:
    -d, --defaults      Source a file with defaults
    -f, --folder        Project folder
    -h, --help          Show this message
    -r, --regenerate    Regenerate cached env variables
    -v, --verbose       Show more info when executing commands
EOF
}

regenerate=0
folder=""
defaults=""
name=""
verbose=0
root_dir=${DEV_TOOLS_PROJECTS_DIR:-"$HOME/projects"}
cache_dir=${DEV_TOOLS_CACHE_DIR:-$XDG_CACHE_HOME/dev-tools}
dev_tools_dir="$(dirname $(readlink -f $(which $0)))/.."

while [ "$1" != "" ]; do
    case $1 in
        -r | --regenerate )
            regenerate=1
            ;;
        -f | --folder )
            shift
            folder=$1
            ;;
        -d | --defaults )
            shift
            defaults=$1
            ;;
        -h | --help )
            usage
            exit
            ;;
        -v | --verbose )
            verbose=1
            ;;
        * )
            if [[ -n "$name" ]]; then
                echo "Too many arguments"
                exit 1
            fi
            name=$1
            ;;
    esac
    shift
done

if [[ -z $name ]]; then
    echo "no project specified"
    exit 1
fi

if [[ -z $folder ]]; then
    folder=$root_dir/$name
fi

composefiles=($(fd "docker-compose.ya?ml|compose.ya?ml" $folder))

function valid_compose_file_input {
    count=$(($1-1))
    if ! [[ $2 =~ ^[0-9]+$ ]] || [[ $2 -gt $count ]]; then
        echo "Only an number between 0-$count is allowed, try again"
        return 1
    fi

    return 0
}

if [[ ${#composefiles[@]} -eq 1 ]]; then
    composefile=${composefiles[0]}
else
    index=0
    echo "Please select which compose file to use:"
    for composefile in "${composefiles[@]}"; do
        echo "$index: $composefile"
        ((++index))
    done

    read -r composefile_index
    while ! valid_compose_file_input "${#composefiles[@]}" "$composefile_index"; do
        read -r composefile_index
    done

    composefile=${composefiles[composefile_index]}
fi

if [ -e "$(dirname $composefile)/.env" ]; then
    set -o allexport
    source "$(dirname $composefile)/.env"
    set +o allexport
fi

if [[ -n $defaults ]]; then
    source $defaults $folder
fi

if [[ ! -e $cache_dir/$name || $regenerate -eq 1 ]]; then
    $dev_tools_dir/generator/generate.py $folder $name $composefile
fi

[[ $verbose -eq 1 ]] && env=" -e DEV_TOOLS_VERBOSE=1" || env=" -e DEV_TOOLS_VERBOSE=0"
while read e; do
    env="$env -e $e"
done <$cache_dir/$name

PROJECT_FOLDER=$(awk -F'=' '/PROJECT_FOLDER/ { print $2 }' $cache_dir/$name)
COMPOSE_PROJECT_NAME=$(awk -F'=' '/COMPOSE_PROJECT_NAME/ { print $2 }' $cache_dir/$name)

export PATH="$dev_tools_dir:$PATH"

cd $PROJECT_FOLDER

tmux new-session$env -A -s $COMPOSE_PROJECT_NAME
