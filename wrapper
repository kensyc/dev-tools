#!/bin/bash

declare -a -g traps

function message() {
    echo -e "\e[34m$1\e[0m" 1>&3
}

function error() {
    echo -e "\e[1;31m$1\e[0m" 1>&2
}

function docker_compose() {
    docker compose \
        -f "$COMPOSE_FILE" \
        -p "$COMPOSE_PROJECT_NAME" \
        "$@"
}

function run_service() {
    message "Docker: Using run mode with --no-deps"
    # Takes too long to fire up depending containers
    # If you need to run a command where a depending container is needed
    # e.g. the mysql container
    # It's better to fire up the environment instead with up -d
    docker_compose run --rm --no-deps "$@"
}

function start_service() {
    docker_compose up -d "$@" 1>&3 2>&3
}

function stop_service() {
    docker_compose stop "$@" 1>&3 2>&3
}

function is_running() {
    docker_compose ps "$1" 2>&3 | grep "Up" > /dev/null
}

function exists() {
    docker_compose ps "$1" > /dev/null 2>&3
}

function exec_service() {
    # find the first non-option argument, which will be the service to execute
    for arg in "$@"; do
        if [[ ! "$arg" =~ ^-.* ]]; then
            service=$arg

            break;
        fi
    done

    args=("$@")

    # dont attach a pseudo TTY if we're not in a terminal (e.g. when we're in a script)
    if [ ! -t 0 ]; then
        args=("-T" "${args[@]}")
    fi

    if is_running "$service"; then
        docker_compose exec "${args[@]}"

        return;
    fi

    if exists "$service"; then
        run_service "${args[@]}"

        return;
    fi

    message "Service $service not found"
    message "Starting up environment"

    docker_compose up -d 1>&3 2>&3
    docker_compose exec "${args[@]}"
    docker_compose stop 1>&3 2>&3
}

function traps() {
    for ((i = 0; i < ${#traps[@]}; i++)); do
        if [[ ${DEV_TOOLS_VERBOSE} -eq 1 ]]; then
            ${traps[$i]} 3>&2
        else
            ${traps[$i]}
        fi
    done

    exec 3>&-
}

function wrapper() {
    main=$1
    shift

    # start log
    exec 3<> /tmp/dockerenv

    # cleanup
    trap traps EXIT

    if [[ ${DEV_TOOLS_VERBOSE} -eq 1 ]]; then
        # use stderr to show logs
        $main "$@" 3>&2

        return;
    fi

    $main "$@"
}
